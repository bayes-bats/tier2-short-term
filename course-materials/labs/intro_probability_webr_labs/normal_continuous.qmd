---
title: "Random Variables - Normal Continuous"
format: html
engine: knitr
webr:
  channel-type: "automatic"
filters:
  - webr
---

## Ideas in code

### Useful functions

### Uniform$(a, b)$

1.  `dunif` computes the density $f(x)$ of $X$ where $f(x) = \displaystyle \frac{1}{b-a}$, for $a < x < b$.
- Arguments:
    - `x`: the value of $x$ in $f(x)$
    - `min`: the parameter $a$, the lower end point of the interval for $X$. The default value is `min = 0`
    - `max`: the parameter $b$, the upper end point of the interval for $X$. The default value is `max = 1`
    
2. `punif` computes the cdf $F(x) = P(X \le x)$ of $X$.
- Arguments:
    - `q`: the value of $x$ in $F(x)$
    - `min`: the parameter $a$, the lower end point of the interval for $X$. The default value is `min = 0`
    - `max`: the parameter $b$, the upper end point of the interval for $X$. The default value is `max = 1`

3. `runif` generates random numbers from the $Unif(a,b)$ distribution.
- Arguments:
    - `n`: the size of the sample we want
    - `min`: the parameter $a$, the lower end point of the interval for $X$. The default value is `min = 0`
    - `max`: the parameter $b$, the upper end point of the interval for $X$. The default value is `max = 1`
    
    
#### Exercises


1. Suppose a random variable $X$ follows a uniform distribution between 0 and 10. Use `dunif` to find the probability density of $X$ at $x = 5$

```{webr}
# code here
```


2. A machine part is produced with a length that varies uniformly between 20 cm and 30 cm. Use `dunif` to calculate the probability density for a part that measures exactly 25 cm.

```{webr}
# code here
```

3. A student arrives at the night bus stop without checking the bus times. The bus arrives once every 15 minutes. Assuming the waiting time is uniformly distributed between 0 and 15 minutes, use `punif` to calculate the probability that the customer waits 10 minutes or less.

```{webr}
# code here
```


4. The temperature on a specific day is uniformly distributed between 10°F and 30°F. What is the probability that the temperature will be more than 18°F?

```{webr}
# code here
```

5. The time it takes for your teacher to return work to you follows a uniform distribution between 2 and 8 days. Generate and plot the wait time for 100 assignments.

```{webr}
# hint, you'll want to use runif
```

    
### Normal$(\mu, \sigma^2)$

1.  `dnorm` computes the density $f(x)$ of $X \sim N(\mu,\sigma^2)$
- Arguments:
    - `x`: the value of $x$ in $f(x)$
    - `mean`: the parameter $\mu$, the mean of the distribution. The default value is `mean = 0`
    - `sd`: the parameter $\sigma$, the sd of the distribution. The default value is `sd = 1`
    
2. `pnorm` computes the cdf $F(x) = P(X \le x)$ of $X$.
- Arguments:
    - `q`: the value of $x$ in $F(x)$
    - `mean`: the parameter $\mu$, the mean of the distribution. The default value is `mean = 0`
    - `sd`: the parameter $\sigma$, the sd of the distribution. The default value is `sd = 1`

3. `rnorm` generates random numbers from the Normal$(\mu, \sigma^2)$ distribution.
- Arguments:
    - `n`: the size of the sample we want
    - `mean`: the parameter $\mu$, the mean of the distribution. The default value is `mean = 0`
    - `sd`: the parameter $\sigma$, the sd of the distribution. The default value is `sd = 1`  


# 1. Understanding the Normal Distribution using `dnorm()`

1. Plot the density function of a normal distribution with a mean of 5 and a standard deviation of 2. How does changing the standard deviation to 1 affect the plot? How does changing the mean to 7 change the plot?

```{webr}
library(ggplot2)

normal_df <- data.frame(x = seq(-5, 15, by = 0.1),
                        y1 = dnorm(x, mean = 5, sd = 2),
                        y2 = dnorm(x, mean = 5, sd = ___),
                        y3 = dnorm(x, mean = ____, sd = 2))
   
p1 <- ggplot(aes(x = x, y = y1)) +
  geom_histogram()
```

2. Calculate the height of the normal density curve at `x = 6` for a normal distribution with mean = 5 and standard deviation = 3.

```{webr}

dnorm(____, mean = ___, sd = ___)
```

3. What is the probability that a normally distributed random variable with a mean of 100 and standard deviation of 15 is less than 120?

```{webr}
pnorm(120, mean = 100, sd = 15)
```


4. Suppose the heights of a population follow a normal distribution with a mean of 170 cm and a standard deviation of 10 cm. What proportion of people are taller than 180 cm? What proportion of people are taller than my sister, who is 192 cm (6 foot 3)? What about who are taller than you? What about who are shorter than you?

```{webr}
# 180cm


```

```{webr}
# Laurie's sister who is 192 cm tall

```

```{webr}
# Taller than you?

```

```{webr}
# Shorter than you?


```


5. Calculate the probability that a value is between 60 and 80 for a normal distribution with mean = 70 and sd = 10.

```{webr}



```

# 3. Generating Random Samples using `rnorm()`

Generate random samples from an normal distribution with mean 0 and sd 20.

```{webr}
# add code here
```

    
#### Example

Let's verify the empirical rule for the standard normal random variable:

Note that (for example) $P(-1 \le X \le 1) = F(1) - F(-1)$:

```{webr-r, message = FALSE}
#| echo: false
#| fig-width: 4
#| fig-height: 4
#| fig-align: center

library(ggplot2)

ggplot(NULL, aes(c(-3,3))) +
  geom_area(stat = "function", fun = dnorm, fill = "darkblue", xlim = c(-1, 1)) +
  geom_area(stat = "function", fun = dnorm, fill = "goldenrod", xlim = c(-2, -1)) +
  geom_area(stat = "function", fun = dnorm, fill = "goldenrod", xlim = c(1,2)) +
  geom_area(stat = "function", fun = dnorm, fill = "darkblue", xlim = c(2, 3)) +
  geom_area(stat = "function", fun = dnorm, fill = "darkblue", xlim = c(-3, -2)) +
  labs(x = "x", y = "f(x)") +
  scale_y_continuous(breaks = NULL) +
  scale_x_continuous(breaks = c(-3, -2,-1,1,2,3)) + 
  theme_minimal()
```

```{webr-r}
pnorm(q = 1) - pnorm(q = -1)
pnorm(q = 2) - pnorm(q = -2)
pnorm(q = 3) - pnorm(q = -3)
```

### The argument `prob` in the function `sample()`

We have seen the function `sample()`, but so far, have only used it when we were sampling uniformly at random. That is, all the values are equally likely. We can sample according to a weighted probability, though, by putting in a vector of probabilities. Let's look at the example of net gain while betting on red on a roulette spin. Recall that if we bet a dollar on red, then our net gain is $+1$ with a probability of $\displaystyle \frac{18}{38}$ and $-1$ with a probability of $\displaystyle \frac{20}{38}$. 

```{webr-r}

gain <- c(1,-1) # define the gain for a single spin
prob_gain <- c(18/38,20/38) #define the corresponding probabilities
exp_gain <- sum(gain*prob_gain)
exp_gain

set.seed(123)
#simulate gain from 10 spins of the wheel
sample(x = gain, size = 10, prob = prob_gain, replace = TRUE)

#simulate net gain from 10 spins of the wheel which would sum these
sum(sample(x = gain, size = 10, prob = prob_gain, replace = TRUE))

```

Here is a simulation showing the Central Limit Theorem at work, with the empirical distribution becoming gradually more bell-shaped. Net gain is the sum of $n$ draws with replacement from the vector `gain` defined above using the `prob_gain` vector. 

```{webr-r}
library(ggplot2)
set.seed(123)
N = 1000
results1 <- replicate(n = N, expr =sum(sample(gain, size = 10, 
                                              prob = prob_gain, replace = TRUE)))
p1 <- data.frame(results1) |>
  ggplot(mapping = aes(x = results1)) +
  geom_histogram(mapping = aes(y = ..density..), bins = 12, color = "grey", 
                 fill = "blue",alpha = 0.8) +
  scale_x_continuous(breaks = seq(from = -10, to = 10, by = 2)) + 
  geom_vline(xintercept = exp_gain*10,lwd = 1, color = "black") +
  geom_vline(xintercept = mean(results1),lwd = 1, color = "darkred") +
  labs(title = "N = 10", 
       x = "net gain", 
       y = "probability") + theme_minimal()

set.seed(123)
results2 <- replicate(n = N, expr =sum(sample(gain, size = 100, 
                                             prob = prob_gain, replace = TRUE)))
p2 <- data.frame(results2) |>
  ggplot(mapping = aes(x = results2)) +
  geom_histogram(mapping = aes(y = ..density..), bins = 20, color = "grey", 
                 fill = "darkblue", alpha = 0.8) +
  scale_x_continuous(breaks = seq(from = -35, to = 30, by = 5)) + 
   geom_vline(xintercept = mean(results2),lwd = 1.5, color = "black") +
  geom_vline(xintercept =exp_gain*100,lwd = 1, color = "darkred") +
  labs(title = "N = 100", 
       x = "Net gain", 
       y = "probability") + theme_minimal()


set.seed(123)
results3 <- replicate(n = N, expr =sum(sample(gain, size = 1000, 
                                              prob = prob_gain, replace = TRUE)) )

p3 <- data.frame(results3) |>
  ggplot(mapping = aes(x = results3)) +
  geom_histogram(mapping = aes(y = ..density..), bins = 40,color = "grey", 
                 fill = "darkblue", alpha = 0.8) +
  scale_x_continuous(breaks = seq(from = -200, to = 100, by = 20)) + 
  geom_vline(xintercept = mean(results3),lwd = 1.5, color = "black") +
  geom_vline(xintercept =exp_gain*1000,lwd = 1, color = "darkred") +
  labs(title = "N = 1,000", 
       x = "Net gain", 
       y = "probability") + theme_minimal()


set.seed(123)
results4 <- replicate(n = N, expr =sum(sample(gain, size = 5000, 
                                              prob = prob_gain, replace = TRUE)) )

p4 <- data.frame(results4) |>
  ggplot(mapping = aes(x = results4)) +
  geom_histogram(mapping = aes(y = ..density..), bins = 50,color = "grey", 
                 fill = "darkblue", alpha = 0.8) +
  scale_x_continuous(breaks = seq(from = -600, to = 100, by = 50)) + 
  geom_vline(xintercept = mean(results4),lwd = 1.5, color = "black") +
  geom_vline(xintercept =exp_gain*5000,lwd = 1, color = "darkred") +
  labs(title = "N = 5,000", 
       x = "Net gain", 
       y = "probability") + theme_minimal()


p1 + p2 + p3 + p4 + plot_annotation(
  title = "Empirical distribution of net gain after N spins (notice the spreads!)",
  subtitle = "Expected net gain (-0.0526*N) in dollars is in red and average (from data) net gain in dollars is in black"
)
```